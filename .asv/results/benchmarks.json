{
    "benchmarks.MemBmvBackward.peakmem_bmv_backward": {
        "code": "class MemBmvBackward:\n    def peakmem_bmv_backward(self, n, bshapes, naive):\n        self.out.backward()\n\n    def setup(self, n, bshapes, naive):\n        A = torch.randn(*bshapes[0], n, n, requires_grad=True)\n        x = torch.randn(*bshapes[1], n)\n        self.out = bmv(A, x, naive=naive).mean()",
        "name": "benchmarks.MemBmvBackward.peakmem_bmv_backward",
        "param_names": [
            "n",
            "bshapes",
            "naive"
        ],
        "params": [
            [
                "500",
                "5000"
            ],
            [
                "((1,), (10,))",
                "((10,), (1,))",
                "((1, 1), (1, 10))",
                "((1, 1), (2, 5))"
            ],
            [
                "False",
                "True"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ee1a337a150728a0bccbf7d1ac129a72725e95a42bb1cb26dadf4f8eb534e750"
    },
    "benchmarks.MemBmvForward.peakmem_bmv_forward": {
        "code": "class MemBmvForward:\n    def peakmem_bmv_forward(self, n, bshapes, naive):\n        bmv(self.A, self.x, naive=naive)\n\n    def setup(self, n, bshapes, naive):\n        self.A = torch.randn(*bshapes[0], n, n)\n        self.x = torch.randn(*bshapes[1], n)",
        "name": "benchmarks.MemBmvForward.peakmem_bmv_forward",
        "param_names": [
            "n",
            "bshapes",
            "naive"
        ],
        "params": [
            [
                "500",
                "5000"
            ],
            [
                "((1,), (10,))",
                "((10,), (1,))",
                "((1, 1), (1, 10))",
                "((1, 1), (2, 5))"
            ],
            [
                "False",
                "True"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "42b33ef03b7a2eddd4dd55dfce8514c3ddafa56eb8257792149096bf8f75f98c"
    },
    "benchmarks.TimeBmvBackward.time_bmv_backward": {
        "code": "class TimeBmvBackward:\n    def time_bmv_backward(self, n, bshapes, naive):\n        self.out.backward()\n\n    def setup(self, n, bshapes, naive):\n        A = torch.randn(*bshapes[0], n, n, requires_grad=True)\n        x = torch.randn(*bshapes[1], n)\n        self.out = bmv(A, x, naive=naive).mean()",
        "min_run_count": 2,
        "name": "benchmarks.TimeBmvBackward.time_bmv_backward",
        "number": 0,
        "param_names": [
            "n",
            "bshapes",
            "naive"
        ],
        "params": [
            [
                "500",
                "5000"
            ],
            [
                "((1,), (10,))",
                "((10,), (1,))",
                "((1, 1), (1, 10))",
                "((1, 1), (2, 5))"
            ],
            [
                "False",
                "True"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b31840f6bec098c4e592021b15f48346a9da5bd031571fbe6da26c6f11484ecb",
        "warmup_time": -1
    },
    "benchmarks.TimeBmvForward.time_bmv_forward": {
        "code": "class TimeBmvForward:\n    def time_bmv_forward(self, n, bshapes, naive):\n        bmv(self.A, self.x, naive=naive)\n\n    def setup(self, n, bshapes, naive):\n        self.A = torch.randn(*bshapes[0], n, n)\n        self.x = torch.randn(*bshapes[1], n)",
        "min_run_count": 2,
        "name": "benchmarks.TimeBmvForward.time_bmv_forward",
        "number": 0,
        "param_names": [
            "n",
            "bshapes",
            "naive"
        ],
        "params": [
            [
                "500",
                "5000"
            ],
            [
                "((1,), (10,))",
                "((10,), (1,))",
                "((1, 1), (1, 10))",
                "((1, 1), (2, 5))"
            ],
            [
                "False",
                "True"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "75eb14795ce2fb0d784b8230ea5fc8876b73747590307d76f2f2b0fb767e00c3",
        "warmup_time": -1
    },
    "version": 2
}